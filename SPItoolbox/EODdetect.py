"""
EOD detection

efish lab
Hokkaido University
Author: Matasaburo Fukutomi
Email: mfukurow@gmail.com
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.axes
from typing import Optional


def EODdetect(
    rec_EOD: np.ndarray, time: np.ndarray, thr_v: float = 0.2, thr_t: float = 0.005
) -> np.ndarray:
    """
    generate EOD time

    Args:
        rec_EOD (np.ndarray): EOD recording trace with multiple (or single) channels
                              (generated by io.load_labmat function)
        time (np.ndarray): time information of rec_EOD
                           (generated by io.load_labmat function)
        thr_v (float, optional): voltage threshold. Defaults to 0.2.
        thr_t (float, optional): interval threshold. Defaults to 0.005.

    Returns:
        np.ndarray: time vector of EOD
    """
    is_high = np.array(np.abs(rec_EOD) > thr_v).sum(axis=0) > 0
    idx_EODcand = np.where(np.diff(np.array(is_high).astype(int)) == 1)[0] + 1
    t_EODcand = time[idx_EODcand]
    interval_EODc = np.diff(t_EODcand)
    idx_EOD = np.concatenate([np.array([True]), np.array(interval_EODc > thr_t)])
    t_EOD = t_EODcand[idx_EOD]
    return t_EOD


def plotIPI(
    t_EOD: np.ndarray, ax: Optional[matplotlib.axes.Axes] = None
) -> matplotlib.axes.Axes:
    """
    plot IPI vs EOD time

    Args:
        t_EOD (np.ndarray): EOD timing (generated by EODdetect function)
        ax (Optional[matplotlib.axes.Axes], optional): Defaults to None.

    Returns:
        matplotlib.axes.Axes: axes containig IPI plot
    """
    if ax is None:
        _, ax = plt.subplots()
    IPI = np.diff(t_EOD) * 1000
    ax.scatter(t_EOD[1:], IPI)
    ax.set_xlabel("Time (s)")
    ax.set_ylabel("IPI (ms)")
    return ax


def plotIPI_wraw(
    t_EOD: np.ndarray,
    time: np.ndarray,
    rec_EOD: np.ndarray,
    xlim: np.ndarray,
    ylim: np.ndarray,
) -> matplotlib.axes.Axes:
    """
    plot IPI with raw EOD recording traces

    Args:
        t_EOD (np.ndarray): EOD timing (generated by EODdetect function)
        time (np.ndarray): time information of rec_EOD
        rec_EOD (np.ndarray): EOD recording trace with multiple (or single) channels
                              (generated by io.load_labmat function)
        xlim (np.ndarray): limit of x axis

    Returns:
        matplotlib.axes.Axes: axes containing plots
    """
    n_ch = rec_EOD.shape[0]
    _, axes = plt.subplots(n_ch + 1, 1, sharex=True)
    for i in range(n_ch):
        axes[i].plot(time, rec_EOD[i,])
    _ = plotIPI(t_EOD, axes[n_ch]).set_ylim(ylim)
    axes[1].set_xlim(xlim)
    print(type(axes))
    return axes
